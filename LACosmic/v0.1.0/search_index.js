var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"Modules = [LACosmic]","category":"page"},{"location":"api/#LACosmic.lacosmic-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T","page":"API/Reference","title":"LACosmic.lacosmic","text":"lacosmic(data::AbstractMatrix; \n    noise=nothing,\n    gain=1,\n    background=0,\n    readnoise=0,\n    mask=falses(size(data)),\n    sigma_clip=4.5,\n    contrast=5,\n    neighbor_thresh=0.3,\n    maxiter=4,\n    saturation_level=2^16,\n    block_size=2)\n\nLaplacian cosmic ray detection (LACosmic). This algorithm implements the algorithm presented in lacosmicx. The return values are the cleaned image and the bad pixel mask. The image cleaning is done via median interpolation.\n\nParameters\n\nnoise is the pre-determined estimate of the data noise (square root of variance), if any\ngain is the image gain in electrons per data number\nbackground is pre-determined image background, if any\nreadnoise is the read noise of the image in electrons\nmask is an input bad pixel mask, where true represents a bad pixel\nsigma_clip is the Laplacian signal-to-noise ratio for flagging bad pixels\ncontrast is the minimum contrast required to flag a bad pixel in the ratio of the Laplacian image to the fine-structure image\nneighbor_thresh is the fractional detection limit for cosmic rays surrounding other cosmic rays. Should be a number between 0 and 1.\nmaxiter is the maximum number of iterations used for detecting bad pixels\nsaturation_level is the saturation value in electrons\nblock_size is the subsampling factor for the Laplacian filter image.\n\nExamples\n\njulia> image = 100 .* randn(1001, 1001) .+ 1000;\n\njulia> clean_image, mask = lacosmic(image, gain=4);\n\nReferences\n\nvan Dokkum, P.G. (2001) - \"Cosmic-Ray Rejection by Laplacian Edge Detection\"\n\n\n\n\n\n","category":"method"},{"location":"api/#LACosmic.subsample","page":"API/Reference","title":"LACosmic.subsample","text":"LACosmic.subsample(array, block_size=2)\n\nSubsample array by the given factor without copying or allocating. This effectively treats each pixel as block_size x block_size pixels. The value of each pixel is not normalized or averaged. This is a view into the parent array, and if the data was changed this view would change subsequently.\n\nExamples\n\njulia> arr = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> sub = LACosmic.subsample(arr)\n4×4 LACosmic.SubsampledArray{Int64, 2, Matrix{Int64}}:\n 1  1  2  2\n 1  1  2  2\n 3  3  4  4\n 3  3  4  4\n\njulia> all(sub[1:2, 1:2] .=== arr[1, 1])\ntrue\n\njulia> sub[3, 3] = 5;\n\njulia> sub\n4×4 LACosmic.SubsampledArray{Int64, 2, Matrix{Int64}}:\n 1  1  2  2\n 1  1  2  2\n 3  3  5  5\n 3  3  5  5\n\n\n\n\n\n","category":"function"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Setup","page":"Examples","title":"Setup","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"You will need the following packages installed to replicate this tutorial","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> ]add Distributions LACosmic Plots PSFModels","category":"page"},{"location":"examples/#Removing-bad-pixels-with-LACosmic.jl","page":"Examples","title":"Removing bad pixels with LACosmic.jl","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"First, let's create some fake data with Gaussian sources","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Distributions\nusing PSFModels: Gaussian\nusing Random\n\nfunction make_data(rng, N; N_sources=20, N_cosmics=20)\n    imdata = fill(200.0, (N, N))\n\n    # Add some fake sources\n    for _ in 1:N_sources\n        x = rand(rng, Uniform(1, N + 1))\n        y = rand(rng, Uniform(1, N + 1))\n        brightness = rand(rng, Uniform(1000, 30000)) / (2π * 3.5^2)\n\t\tmodel = Gaussian(;x, y, fwhm=3.5, amp=brightness)\n        imdata .+= model[axes(imdata)...]\n\tend\n\n    # Add the poisson noise\n    imdata .= rand.(rng, Poisson.(imdata))\n\n    # Add readnoise\n    imdata .+= rand(rng, Normal(0, 10), (N, N))\n\n    clean_image = copy(imdata)\n\t\n    # Add Nc fake cosmic rays\n    crmask = falses((N, N))\n\tfor i in 1:N_cosmics\n    \tcr_x = round(Int, rand(rng, Uniform(6, N - 5)))\n    \tcr_y = round(Int, rand(rng, Uniform(6, N - 5)))\n    \tcr_brightnesses = rand(rng, Uniform(1000, 30000))\n    \timdata[cr_y, cr_x] += cr_brightnesses\n    \tcrmask[cr_y, cr_x] = true\n\tend\n\n    # Make a mask where the detected cosmic rays should be\n    return (image=imdata, clean_image, mask=crmask)\nend\n\nrng = MersenneTwister(808)\ndata = make_data(rng, 201)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"let's inspect it","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Plots\n\nfunction imshow(image; kwargs...)\n\taxy, axx = axes(image)\n\theatmap(axy, axx, image; \n        aspect_ratio=1,\n        ticks=false,\n        xlim=extrema(axx),\n        ylim=extrema(axy),\n        kwargs...)\nend\n\nplot(\n    imshow(log10.(data.clean_image), title=\"original image\"),\n    imshow(log10.(data.image), title=\"image w/cosmics\"),\n    size=(775, 350)\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"now we can clean it using lacosmic","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using LACosmic\n\nclean_image, mask = lacosmic(data.image, sigma_clip=6, contrast=5, neighbor_thresh=1)\n\nplot(\n    imshow(log10.(data.clean_image), title=\"original image\"),\n    imshow(log10.(clean_image), title=\"cleaned image\"),\n    size=(775, 350)\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"plot(\n    imshow(data.mask, title=\"true cosmics\", cbar=false),\n    imshow(mask, title=\"detected cosmics\", cbar=false),\n    size=(700, 400)\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"data.mask == mask","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = LACosmic","category":"page"},{"location":"#LACosmic.jl","page":"Home","title":"LACosmic.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Code) (Image: Build Status) (Image: PkgEval) (Image: Coverage) (Image: License)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Laplacian cosmic-ray detection (L.A.Cosmic) in pure Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use the LACosmic library, first install it using Pkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]add LACosmic","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To import the library","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LACosmic","category":"page"},{"location":"","page":"Home","title":"Home","text":"there is one exported function: lacosmic","category":"page"},{"location":"","page":"Home","title":"Home","text":"clean_image, mask = lacosmic(image)","category":"page"},{"location":"#Contributing-and-Support","page":"Home","title":"Contributing and Support","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute, feel free to open a pull request. If you want to discuss something before contributing, head over to discussions and join or open a new topic. If you're having problems with something, please open an issue.","category":"page"}]
}
