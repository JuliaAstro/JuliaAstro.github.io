var documenterSearchIndex = {"docs":
[{"location":"transforms/#Transformations","page":"Transformations","title":"Transformations","text":"","category":"section"},{"location":"transforms/#Extinction","page":"Transformations","title":"Extinction","text":"","category":"section"},{"location":"transforms/","page":"Transformations","title":"Transformations","text":"By levaraging DustExtinction.jl we can apply common reddening laws to our spectra.","category":"page"},{"location":"transforms/","page":"Transformations","title":"Transformations","text":"julia> using Unitful, Measurements, Random\n\njulia> rng = Random.seed!(0);\n\njulia> wave = (1:0.5:3)u\"μm\"\n(1.0:0.5:3.0) μm\n\njulia> sigma = randn(rng, size(wave))\n5-element Vector{Float64}:\n  0.942970533446119\n  0.13392275765318448\n  1.5250689085124804\n  0.12390123120559722\n -1.205772284259936\n\njulia> flux = (100 .± sigma)u\"W/m^2/μm\"\n5-element Vector{Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(μm^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}}}:\n 100.0 ± 0.94 W μm^-1 m^-2\n 100.0 ± 0.13 W μm^-1 m^-2\n 100.0 ± 1.5 W μm^-1 m^-2\n 100.0 ± 0.12 W μm^-1 m^-2\n 100.0 ± -1.2 W μm^-1 m^-2\n\njulia> spec = spectrum(wave, flux)\nSpectrum(Quantity{Float64, 𝐋, Unitful.FreeUnits{(μm,), 𝐋, nothing}}, Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(μm^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\njulia> red = redden(spec, 0.3)\nSpectrum(Quantity{Float64, 𝐋, Unitful.FreeUnits{(μm,), 𝐋, nothing}}, Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(μm^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\njulia> red.flux\n5-element Vector{Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(μm^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}}}:\n 89.44 ± 0.84 W μm^-1 m^-2\n 94.35 ± 0.13 W μm^-1 m^-2\n  96.4 ± 1.5 W μm^-1 m^-2\n 97.48 ± 0.12 W μm^-1 m^-2\n  98.1 ± 1.2 W μm^-1 m^-2\n\njulia> deredden!(red, 0.3)\nSpectrum(Quantity{Float64, 𝐋, Unitful.FreeUnits{(μm,), 𝐋, nothing}}, Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(μm^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\njulia> red.flux ≈ spec.flux\ntrue","category":"page"},{"location":"transforms/#API/Reference","page":"Transformations","title":"API/Reference","text":"","category":"section"},{"location":"transforms/#DustExtinction.redden","page":"Transformations","title":"DustExtinction.redden","text":"redden(::AbstractSpectrum, Av; Rv = 3.1, law = CCM89)\n\nRedden a spectrum using common color laws provided by DustExtinction.jl. Av is the total extinction, Rv is the selective extinction (3.1 is a common value for the Milky Way) and law is the color law to use for determining the extinction.\n\n\n\n\n\n","category":"function"},{"location":"transforms/#Spectra.redden!","page":"Transformations","title":"Spectra.redden!","text":"redden!(::AbstractSpectrum, Av; Rv = 3.1, law = CCM89)\n\nIn-place version of redden\n\n\n\n\n\n","category":"function"},{"location":"transforms/#DustExtinction.deredden","page":"Transformations","title":"DustExtinction.deredden","text":"deredden(::AbstractSpectrum, Av; Rv = 3.1, law = CCM89)\n\nDeredden a spectrum using common color laws provided by DustExtinction.jl. Av is the total extinction, Rv is the selective extinction (3.1 is a common value for the Milky Way) and law is the color law to use for determining the extinction.\n\n\n\n\n\n","category":"function"},{"location":"transforms/#Spectra.deredden!","page":"Transformations","title":"Spectra.deredden!","text":"deredden!(::AbstractSpectrum, Av; Rv = 3.1, law = CCM89)\n\nIn-place version of deredden\n\n\n\n\n\n","category":"function"},{"location":"fitting/#Fitting","page":"Fitting","title":"Fitting","text":"","category":"section"},{"location":"fitting/#Spectra.continuum","page":"Fitting","title":"Spectra.continuum","text":"continuum(::AbstractSpectrum, deg::Int=3)\n\nReturn a continuum-normalized spectrum by fitting the continuum with a Chebyshev polynomial of degree deg.\n\n\n\n\n\n","category":"function"},{"location":"fitting/#Spectra.continuum!","page":"Fitting","title":"Spectra.continuum!","text":"continuum!(::AbstractSpectrum, deg::Int=3)\n\nIn-place version of continuum\n\n\n\n\n\n","category":"function"},{"location":"analysis/#Analysis","page":"Analysis","title":"Analysis","text":"","category":"section"},{"location":"analysis/#Spectra.equivalent_width","page":"Analysis","title":"Spectra.equivalent_width","text":"equivalent_width(::AbstractSpectrum)\n\nCalculate the equivalent width of the given continuum-normalized spectrum. Return value has units equal to wavelengths.\n\n\n\n\n\n","category":"function"},{"location":"analysis/#Spectra.line_flux","page":"Analysis","title":"Spectra.line_flux","text":"line_flux(::AbstractSpectrum)\n\nCalculate the line flux of the given continuum-normalized spectrum. Return value has units equal to flux.\n\n\n\n\n\n","category":"function"},{"location":"contrib/#contrib","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contrib/#Extending-AbstractSpectrum","page":"Contributing","title":"Extending AbstractSpectrum","text":"","category":"section"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"Most of the code written within this library should work as long as your subtype contains the following fields","category":"page"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"wave::AbstractArray\nflux::AbstractArray\nmeta::Dict{Symbol, Any}","category":"page"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"Variations of wave and flux ought to work given the appropriate methods being written.","category":"page"},{"location":"contrib/#Contributing-Guidelines","page":"Contributing","title":"Contributing Guidelines","text":"","category":"section"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"In general, for contributing, use the following guidelines:","category":"page"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"Write clean, pragmatic julia code\nNew features must come with adequete unit testing and documentation\nEach new feature should bump the package one minor version\nMake sure to cite relevant papers and code where appropriate","category":"page"},{"location":"contrib/","page":"Contributing","title":"Contributing","text":"If you are interested in contributing, head over to GitHub and take a look at some of the issues for ideas!","category":"page"},{"location":"#Spectra.jl","page":"Home","title":"Spectra.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Utilities for interfacing with astronomical spectra and synthetic spectra libraries.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\", \"spectrum.md\", \"transforms.md\"]","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From the REPL, press ] to enter Pkg mode","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/JuliaAstro/Spectra.jl\n\njulia> using Spectra","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Here is a quick demo of some of our features","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Spectra, FITSIO, Unitful, UnitfulAstro, Plots\n\njulia> fitsurl = \"https://dr14.sdss.org/optical/spectrum/view/data/format=fits/spec=lite?plateid=1323&mjd=52797&fiberid=12\";\n\njulia> # download(fitsurl, \"sdss.fits\");\n\njulia> f = FITS(\"sdss.fits\")\nFile: sdss.fits\nMode: \"r\" (read-only)\nHDUs: Num  Name     Type\n      1             Image\n      2    COADD    Table\n      3    SPECOBJ  Table\n      4    SPZLINE  Table\n\njulia> wave = (10 .^ read(f[2], \"loglam\"))u\"angstrom\";\n\njulia> flux = (read(f[2], \"flux\") .* 1e-17)u\"erg/s/cm^2/angstrom\";\n\njulia> spec = spectrum(wave, flux)\nSpectrum(Quantity{Float32, 𝐋, Unitful.FreeUnits{(Å,), 𝐋, nothing}}, Quantity{Float64, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(Å^-1, erg, cm^-2, s^-1), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\njulia> plot(spec);","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> cont_fit = continuum(spec)\nSpectrum(Quantity{Float32, 𝐋, Unitful.FreeUnits{(Å,), 𝐋, nothing}}, Quantity{Float64, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(Å^-1, erg, cm^-2, s^-1), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n  coeffs: Quantity{Float64, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(Å^-1, erg, cm^-2, s^-1), 𝐌 𝐋^-1 𝐓^-3, nothing}}[1.983152216046405e-15 erg Å^-1 cm^-2 s^-1, -1.8822245369267038e-16 erg Å^-1 cm^-2 s^-1, -1.0422750370065006e-16 erg Å^-1 cm^-2 s^-1, 4.8112282273206135e-17 erg Å^-1 cm^-2 s^-1]\n  normalized: true\n\njulia> plot(cont_fit, xlims=(6545, 6600));","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you found this software or any derivative work useful in your academic work, I ask that you please cite the code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TODO","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Please see Contributing for information on contributing and extending Spectra.jl.","category":"page"},{"location":"spectrum/#Spectrum","page":"Spectrum","title":"Spectrum","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"Here we will go over the different spectral types and how we use them.","category":"page"},{"location":"spectrum/#Types","page":"Spectrum","title":"Types","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"Spectra are defined as possible subtypes of AbstractSpectrum. You can use these directly for construction, or use the catch-all spectrum function, which is preferred.","category":"page"},{"location":"spectrum/#Spectra.Spectrum","page":"Spectrum","title":"Spectra.Spectrum","text":"Spectrum <: AbstractSpectrum\n\nA 1-dimensional spectrum stored as vectors of real numbers. The wavelengths are assumed to be in angstrom.\n\n\n\n\n\n","category":"type"},{"location":"spectrum/#Constructors","page":"Spectrum","title":"Constructors","text":"","category":"section"},{"location":"spectrum/#Spectra.spectrum","page":"Spectrum","title":"Spectra.spectrum","text":"spectrum(wave, flux; kwds...)\n\nConstruct a spectrum given the spectral wavelengths and fluxes. This will automatically dispatch the correct spectrum type given the shape and element type of the given flux. Any keyword arguments will be accessible from the spectrum as properties.\n\nExamples\n\njulia> wave = range(1e4, 4e4, length=1000);\n\njulia> flux = 100 .* ones(size(wave));\n\njulia> spec = spectrum(wave, flux)\nSpectrum(Float64, Float64)\n\njulia> spec = spectrum(wave, flux, name=\"Just Noise\")\nSpectrum(Float64, Float64)\n  name: Just Noise\n\njulia> spec.name\n\"Just Noise\"\n\nThere is easy integration with Unitful.jl and its sub-projects and Measurements.jl\n\njulia> using Unitful, UnitfulAstro, Measurements\n\njulia> wave = range(1, 4, length=1000)u\"μm\";\n\njulia> sigma = randn(size(wave));\n\njulia> flux = (100 .± sigma)u\"erg/cm^2/s/angstrom\";\n\njulia> spec = spectrum(wave, flux)\nSpectrum(Quantity{Float64, 𝐋, Unitful.FreeUnits{(μm,), 𝐋, nothing}}, Quantity{Measurement{Float64}, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(Å^-1, erg, cm^-2, s^-1), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\nFor a multi-order spectrum, all orders must have the same length, so be sure to pad any ragged orders with NaN.\n\njulia> wave = reshape(range(100, 1e4, length=1000), 100, 10)';\n\njulia> flux = ones(10, 100) .* collect(1:10);\n\njulia> spec = spectrum(wave, flux)\nEchelleSpectrum(Float64, Float64)\n  # orders: 10\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Basic-operations","page":"Spectrum","title":"Basic operations","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"For more advanced transformations, see Transformations","category":"page"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"Function\nBase.length(::AbstractSpectrum)\nBase.size(::AbstractSpectrum)\nBase.maximum(::AbstractSpectrum)\nBase.minimum(::AbstractSpectrum)\nBase.argmax(::AbstractSpectrum)\nBase.argmin(::AbstractSpectrum)\nBase.findmax(::AbstractSpectrum)\nBase.findmin(::AbstractSpectrum)","category":"page"},{"location":"spectrum/#Arithmetic","page":"Spectrum","title":"Arithmetic","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"Function\n+(::AbstractSpectrum, A)\n-(::AbstractSpectrum, A)\n*(::AbstractSpectrum, A)\n/(::AbstractSpectrum, A)","category":"page"},{"location":"spectrum/#Unitful-helpers","page":"Spectrum","title":"Unitful helpers","text":"","category":"section"},{"location":"spectrum/#Unitful.unit","page":"Spectrum","title":"Unitful.unit","text":"Unitful.unit(::AbstractSpectrum)\n\nGet the units of a spectrum. Returns a tuple of the wavelength units and flux/sigma units\n\nExamples\n\njulia> using Unitful, UnitfulAstro\n\njulia> wave = range(1e4, 3e4, length=1000);\n\njulia> flux = wave .* 10 .+ randn(1000);\n\njulia> spec = spectrum(wave * u\"angstrom\", flux * u\"W/m^2/angstrom\");\n\njulia> w_unit, f_unit = unit(spec)\n(Å, W Å^-1 m^-2)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Unitful.ustrip","page":"Spectrum","title":"Unitful.ustrip","text":"Unitful.ustrip(::AbstractSpectrum)\n\nRemove the units from a spectrum. Useful for processing spectra in tools that don't play nicely with Unitful.jl\n\nExamples\n\njulia> using Unitful, UnitfulAstro\n\njulia> wave = range(1e4, 3e4, length=1000);\n\njulia> flux = wave .* 10 .+ randn(1000);\n\njulia> spec = spectrum(wave*u\"angstrom\", flux*u\"W/m^2/angstrom\")\nSpectrum(Quantity{Float64, 𝐋, Unitful.FreeUnits{(Å,), 𝐋, nothing}}, Quantity{Float64, 𝐌 𝐋^-1 𝐓^-3, Unitful.FreeUnits{(Å^-1, m^-2, W), 𝐌 𝐋^-1 𝐓^-3, nothing}})\n\njulia> ustrip(spec)\nSpectrum(Float64, Float64)\n\n\n\n\n\n","category":"function"},{"location":"spectrum/#Plotting","page":"Spectrum","title":"Plotting","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"We provide simple plotting recipes for spectra using Plots.jl","category":"page"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"using Plots, Spectra\n\nwave = range(1e3, 5e4, length=100)\nspec = blackbody(wave, 2000)\n\nplot(spec)\nsavefig(\"spec-plot.svg\"); nothing # hide","category":"page"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"(Image: )","category":"page"},{"location":"spectrum/#Index","page":"Spectrum","title":"Index","text":"","category":"section"},{"location":"spectrum/","page":"Spectrum","title":"Spectrum","text":"Pages = [\"spectrum.md\"]","category":"page"}]
}
