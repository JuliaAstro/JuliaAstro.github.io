var documenterSearchIndex = {"docs":
[{"location":"api/#API/Reference","page":"API/Reference","title":"API/Reference","text":"","category":"section"},{"location":"api/#Index","page":"API/Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api/#Types","page":"API/Reference","title":"Types","text":"","category":"section"},{"location":"api/#SkyCoords.AbstractSkyCoords","page":"API/Reference","title":"SkyCoords.AbstractSkyCoords","text":"The supertype for all sky coordinate systems.\n\n\n\n\n\n","category":"type"},{"location":"api/#SkyCoords.ICRSCoords","page":"API/Reference","title":"SkyCoords.ICRSCoords","text":"ICRSCoords(ra, dec)\n\nInternational Celestial Reference System\n\nThis is the current standard adopted by the International Astronomical Union notably due to its high level of accuracy compared to standard equatorial coordinate systems. What sets this apart from FK5Coords is that it is completely defined using extragalactic radio sources rather than a geocentric frame, which means the reference frame will not change due to Earth's motion.\n\nCoordinates\n\nra - Right ascension in radians (0, 2π)\ndec - Declination in radians (-π/2, π/2)\n\n\n\n\n\n","category":"type"},{"location":"api/#SkyCoords.GalCoords","page":"API/Reference","title":"SkyCoords.GalCoords","text":"GalCoords(l, b)\n\nGalactic Coordinate System\n\nThis coordinate system is defined based on the projection of the Milky Way galaxy onto our celestial sphere, with (0, 0) being approximately the center of our galaxy.\n\nCoordinates\n\nl - Galactic longitude in radians (-π, π)\nb - Galactic latitude in radians (-π/2, π/2)\n\n\n\n\n\n","category":"type"},{"location":"api/#SkyCoords.SuperGalCoords","page":"API/Reference","title":"SkyCoords.SuperGalCoords","text":"SuperGalCoords(l, b)\n\nSupergalactic Coordinate System\n\nThe supergalactic plane is part of a reference frame for the supercluster of galaxies that contains the Milky Way galaxy. The supergalactic plane as so-far observed is more or less perpendicular to the plane of the Milky Way, the angle is 84.5 degrees. Viewed from the Earth, the plane traces a great circle across the sky through the constellations \n\nCoordinates\n\nl - SuperGalCoords longitude in radians (-π, π)\nb - SuperGalCoords latitude in radians (-π/2, π/2)\n\n\n\n\n\n","category":"type"},{"location":"api/#SkyCoords.FK5Coords","page":"API/Reference","title":"SkyCoords.FK5Coords","text":"FK5Coords{equinox}(ra, dec)\n\nEquatorial Coordinate System\n\nThis coordinate system maps the celestial sphere based on a geocentric observer. Historically the oldest, this coordinate system has been shown to be inaccurate due to its definitions based on the Earth, which has long-scale precession causing the reference frame to change. Because of this, an equinox must be provided (typically 2000, commonly known as J2000) which defines the reference frame.\n\nCoordinates\n\nra - Right ascension in radians (0, 2π)\ndec - Declination in radians (-π/2, π/2)\n\n\n\n\n\n","category":"type"},{"location":"api/#SkyCoords.EclipticCoords","page":"API/Reference","title":"SkyCoords.EclipticCoords","text":"EclipticCoords{equinox}(lon, lat)\n\nEcliptic Coordinate System\n\nThis coordinate system is geocentric with the ecliptic plane as the xy-plane with x oriented according to the equinox specified by equinox.\n\nCoordinates\n\nlon - Longitude in radians (0, 2π)\nlat - Latitude in radians (-π/2, π/2)\n\n\n\n\n\n","category":"type"},{"location":"api/#Conversion","page":"API/Reference","title":"Conversion","text":"","category":"section"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"To convert between types, there are three (equivalent) methods of doing so.","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"julia> c1 = ICRSCoords(0., 0.)\nICRSCoords{Float64}(0.0, 0.0)","category":"page"},{"location":"api/","page":"API/Reference","title":"API/Reference","text":"using convert\njulia> convert(GalCoords, c1)\nGalCoords{Float64}(1.6814027872278692, -1.0504884034813007)\nusing constructors\njulia> GalCoords(c1)\nGalCoords{Float64}(1.6814027872278692, -1.0504884034813007)\nusing |>\njulia> c1 |> GalCoords\nGalCoords{Float64}(1.6814027872278692, -1.0504884034813007)","category":"page"},{"location":"api/#Catalog-Matching","page":"API/Reference","title":"Catalog Matching","text":"","category":"section"},{"location":"api/#SkyCoords.match-Tuple{KDTree, AbstractArray{<:AbstractSkyCoords}}","page":"API/Reference","title":"SkyCoords.match","text":"match(refcoords::AbstractArray{<:AbstractSkyCoords}, \n      matchcoords::AbstractArray{<:AbstractSkyCoords};\n      nthneighbor::Int = 1)\n\nRequires Julia ≥ 1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors).\n\nFinds the nearest entries in refcoords to the coordinates contained in matchcoords. The keyword argument nthneighbor determines which nearest neighbor to search for; typically this should be 1 when matching one set of coordinates to another. Another common use case is setting nthneighbor = 2 when matching a catalog against itself to find the nearest neighbor of each coordinate in the same catalog. \n\nReturns (id, sep), where\n\nid is an array containing indices of the coordinates in refcoords that matched with the elements of matchcoords, and \nsep is an array giving the angular separation between the elements of matchcoords and the above matches.\n\nNote that this method creates a KDTree from refcoords and then calls the method below. If you plan to use the same refcoords to match to many different matchcoords, then you should directly construct KDTree(refcoords) and call the method below.\n\nmatch(tree::KDTree, matchcoords::AbstractArray{<:AbstractSkyCoords};\n      nthneighbor::Int = 1)\n\nAs above, but uses a pre-constructed tree::KDTree rather than creating one from a reference catalog of coordinates.\n\n\n\n\n\n","category":"method"},{"location":"api/#NearestNeighbors.KDTree-Tuple{AbstractArray{<:AbstractSkyCoords}}","page":"API/Reference","title":"NearestNeighbors.KDTree","text":"KDTree(data::AbstractArray{<:AbstractSkyCoords}; kws...)\n\nRequires Julia ≥ 1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors).\n\nConstruct a KDTree from NearestNeighbors.jl. The provided data are used to construct the tree, and the kws... are passed to NearestNeighbors.KDTree. An internal Cartesian coordinate representation is used, with a standard coordinate representation of CartesianCoords{ICRSCoords}. Coordinate conversions are applied automatically in the following methods, which extend those from NearestNeighbors.jl.\n\nnn(tree::KDTree, coord::AbstractSkyCoords) queries the tree for the entry nearest the provided coord.\nnn(tree::KDTree, coords::AbstractArray{<:AbstractSkyCoords}) queries the tree for the entry nearest each coordinate in coords.\nknn(tree::KDTree, coord::AbstractSkyCoords, k::Int) queries the tree for the k coordinates nearest the provided coord.\nknn(tree::KDTree, coords::AbstractArray{<:AbstractSkyCoords}, k::Int) queries the tree for the k coordinates nearest each coordinate in coords.\n\n\n\n\n\n","category":"method"},{"location":"api/#NearestNeighbors.nn-Tuple{KDTree, AbstractSkyCoords}","page":"API/Reference","title":"NearestNeighbors.nn","text":"nn(tree::KDTree, coord::AbstractSkyCoords)\n\nRequires Julia ≥ 1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors).\n\nQueries the tree for the nearest entry to the provided coord. Returns the index into the tree of the nearest entry and the angular separation between the two coordinates, in radians.\n\nnn(tree::KDTree, coords::AbstractArray{<:AbstractSkyCoords})\n\nReturns arrays (id, sep) containing the indices and angular separations (in radians) of the closest entries in tree for each coordinate in coords.\n\n\n\n\n\n","category":"method"},{"location":"api/#NearestNeighbors.knn-Tuple{KDTree, AbstractSkyCoords, Int64, Bool}","page":"API/Reference","title":"NearestNeighbors.knn","text":"knn(tree::KDTree, coord::AbstractSkyCoords, \n    k::Int, sortres::Bool = false)\n\nRequires Julia ≥ 1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors).\n\nQueries the tree for the k nearest entries to the provided coord. Returns vectors (id, sep), which, respectively, contain the indices into the tree of the k nearest entries, and the angular separations between coord and the k nearest entries, in radians. If sortres is true, the returned neighbors are sorted by separation.\n\nknn(tree::KDTree, coords::AbstractArray{<:AbstractSkyCoords}, k::Int, sortres::Bool = false)\n\nReturns arrays (id, sep) containing vectors of indices and angular separations (in radians) of the k closest entries in tree for each coordinate in coords. If sortres is true, the returned neighbors are sorted by separation.\n\n\n\n\n\n","category":"method"},{"location":"api/#NearestNeighbors.inrange-Tuple{KDTree, AbstractSkyCoords, Number}","page":"API/Reference","title":"NearestNeighbors.inrange","text":"inrange(tree::KDTree, coord::AbstractSkyCoords, seplim::Number)\n\nRequires Julia ≥ 1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors).\n\nSearches for coordinates in the tree with angular separations from coord less than seplim, which must be given in radians. If tree = KDTree(data), returns indices into data.\n\ninrange(tree::KDTree, coords::AbstractArray{<:AbstractSkyCoords}, seplim::Number)\n\nFor each coordinate in coords, finds coordinates in tree that lie within seplim radians.\n\n\n\n\n\n","category":"method"},{"location":"api/#Functions","page":"API/Reference","title":"Functions","text":"","category":"section"},{"location":"api/#SkyCoords.separation","page":"API/Reference","title":"SkyCoords.separation","text":"separation(c1::AbstractSkyCoords, c2::AbstractSkyCoords) -> distance\n\nReturn angular separation between two sky coordinates, in radians.\n\nThe angular separation is calculated using the Vincenty formula, which is slightly more complex and computationally expensive than some alternatives, but is stable at at all distances, including the poles and antipodes.\n\n\n\n\n\n","category":"function"},{"location":"api/#SkyCoords.position_angle","page":"API/Reference","title":"SkyCoords.position_angle","text":"position_angle(c1::AbstractSkyCoords, c2::AbstractSkyCoords) -> angle\n\nReturn position angle between two sky coordinates, in positive radians.\n\nExamples\n\njulia> c1 = ICRSCoords(0, 0); c2 = ICRSCoords(deg2rad(1), 0);\n\njulia> position_angle(c1, c2) |> rad2deg\n90.0\n\n\n\n\n\n","category":"function"},{"location":"api/#SkyCoords.offset","page":"API/Reference","title":"SkyCoords.offset","text":"offset(::AbstractSkyCoords, separation, pa) -> coordinate\n\nOffset a coordinate by a given angular separation, separation, in radians and position angle, pa, in radians.\n\nUses the sine and cosine rules in spherical coordinates with corrections for the antipodes. Returns a sky coordinate of the same type as input.\n\nExamples\n\njulia> c1 = ICRSCoords(0, 0);\n\njulia> c2 = offset(c1, deg2rad(1), deg2rad(90))\nICRSCoords{Float64}(0.017453292519943295, 1.0686516840418957e-18)\n\njulia> offset(c1, c2) .|> rad2deg\n(1.0, 90.0)\n\nSee Also\n\nseparation, position_angle\n\n\n\n\n\noffset(::AbstractSkyCoords, AbstractSkyCoords) -> angle, angle\n\nReturn the separation and position angle in radians between two sky coordinates.\n\nExamples\n\njulia> c1 = ICRSCoords(0, 0); c2 = ICRSCoords(deg2rad(1), 0);\n\njulia> offset(c1, c2) .|> rad2deg\n(1.0, 90.0)\n\nSee Also\n\nseparation, position_angle\n\n\n\n\n\n","category":"function"},{"location":"#SkyCoords.jl","page":"Home","title":"SkyCoords.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: GitHub) (Image: CI) (Image: PkgEval) (Image: codecov)","category":"page"},{"location":"","page":"Home","title":"Home","text":"SkyCoords.jl provides a type system for astronomical coordinate systems with appropriate conversions between them.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"From the Julia REPL","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.6) pkg> add SkyCoords\n\njulia> using SkyCoords","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are currently five supported coordinate systems. The following immutable types are used to represent coordinates in each system:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ICRSCoords: ICRS coordinates system\nGalCoords: Galactic coordinates system\nSuperGalCoords: Supergalactic coordinates system\nFK5Coords: FK5 coordinates system (with arbitrary equinox)\nEclipticCoords: Ecliptic coordinates system","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each type holds a longitude and latitude, and each is a subtype of AbstractSkyCoords.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> c1 = ICRSCoords(0.0, 0.0)  # inputs are ra, dec in radians\nICRSCoords{Float64}(0.0, 0.0)\n\njulia> c1.ra # access ra, dec individually\n0.0\n\njulia> c2 = convert(GalCoords, c1) # convert to a different system\nGalCoords{Float64}(1.6814027872278692, -1.0504884034813007)\n\njulia> c2.l # Note that galactic coordinate fields are l, b\n1.6814027872278692\n\njulia> c1 |> FK5Coords{2000} # Can use piping syntax for conversion\nFK5Coords{2000, Float64}(1.1102233723050067e-7, 4.411803426976326e-8)","category":"page"},{"location":"#Units","page":"Home","title":"Units","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There is built-in support for units via Unitful.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Unitful\n\njulia> c = ICRSCoords(0.11255u\"°\", 0.00091u\"rad\")\nICRSCoords{Float64}(0.0019643680731196178, 0.00091)\n\njulia> c2 = FK5Coords{2000}(0.1u\"rad\", 0.5)\nFK5Coords{2000, Float64}(0.1, 0.5)\n\njulia> SkyCoords.lat(u\"μrad\", c)\n910.0 μrad","category":"page"},{"location":"#Parsing-from-strings","page":"Home","title":"Parsing from strings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The AstroAngles.jl package provides convenient string parsing utilities","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using AstroAngles\n\njulia> c3 = ICRSCoords(hms\"05:34:31.94\", dms\"+22:00:52.2\")\nICRSCoords{Float64}(1.4596726677614607, 0.3842255081802917)","category":"page"},{"location":"","page":"Home","title":"Home","text":"for example, to load coordinates from a target list","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using CSV, DataFrames\n\njulia> table = CSV.File(\"target_list.csv\") |> DataFrame;\n\njulia> [table.ra table.dec]\n203×2 Matrix{String}:\n \"00 05 01.42\"  \"40 03 35.82\"\n \"00 05 07.52\"  \"73 13 11.34\"\n \"00 36 01.40\"  \"-11 12 13.00\"\n[...]\n\njulia> coords = @. ICRSCoords(hms2rad(table.ra), dms2rad(table.dec))\n203-element Vector{ICRSCoords{Float64}}:\n ICRSCoords{Float64}(0.021919880964005448, 0.6991780256843024)\n ICRSCoords{Float64}(0.022363485482220672, 1.277926878539953)\n ICRSCoords{Float64}(0.15718144355252264, -0.19553990200190915)\n[...]","category":"page"},{"location":"#Angular-Separation-between-Coordinates","page":"Home","title":"Angular Separation between Coordinates","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The separation function allows you to compute the angular (great-circle) distance between two coordinates, in radians, using the Vincenty formula.  The coordinates can be also given in different systems.  For example, according to SIMBAD the FK5Coords{2000} coordinates of Mizar are","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> mizar = FK5Coords{2000}(3.507787, 0.958628)\nFK5Coords{2000, Float64}(3.507787, 0.958628)","category":"page"},{"location":"","page":"Home","title":"Home","text":"while the GalCoords coordinates of Alcor are","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> alcor = GalCoords(1.968189, 1.072829)\nGalCoords{Float64}(1.968189, 1.072829)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Their angular separation is given by","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> separation(mizar, alcor) # Radians\n0.003435309169452965\n\njulia> rad2deg(separation(mizar, alcor)) * 60 # Arcminutes\n11.809723003934822","category":"page"},{"location":"","page":"Home","title":"Home","text":"with an angle","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> position_angle(mizar, alcor) # radians\n1.2446024012417884\n\njulia> position_angle(mizar, alcor) |> rad2deg # degrees\n71.31046476300233\n","category":"page"},{"location":"#Catalog-Matching","page":"Home","title":"Catalog Matching","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SkyCoords.jl offers coordinate catalog matching functionality through an extension that depends on NearestNeighbors.jl. This functionality requires Julia ≥ v1.9 and NearestNeighbors.jl to be loaded (e.g., using NearestNeighbors.jl).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The SkyCoords.match function can match two catalogs of coordinates with an interface similar to Astropy's match_coordinates_sky. This function operates on two arrays of coordinates, the first being the \"reference\" catalog that will be searched to find the closest coordinates to those in the second catalog. This function returns the indices into the reference catalog of the matches and the angular separation (in radians) between each coordinate and its match in the reference catalog.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using NearestNeighbors # Required to use `match` method\nusing SkyCoords\n# Generate random coordinates\nN = 1000\nlons = 2pi .* rand(N) # (0, 2π)\nlats = pi .* (rand(N) .- 0.5) # (-π, π)\n# The catalog to match against\nrefcat = ICRSCoords.(lons, lats)\n# The catalog of coordinates for which you want to find neighbors in \"refcat\"\nmatchcat = refcat[[1,5,10]]\n\nids, sep = SkyCoords.match(refcat, matchcat)\nids == [1,5,10] # Indices for which `refcat[ids]` match to `matchcat`\n# output\ntrue","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that SkyCoords.match is not exported (to avoid clashing with Base.match) and should be used via the qualified signature SkyCoords.match (as above) or explicitly imported (e.g., using SkyCoords: match).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This extension additionally supports construction of NearestNeighbors.KDTrees from AbstractArray{<:AbstractSkyCoords} and extends methods for general nearest neighbors queries (nn, knn) and queries for all neighbors within a given separation (inrange, similar to Astropy's search_around_sky).","category":"page"},{"location":"","page":"Home","title":"Home","text":"More complicated catalog joins are supported by the FlexiJoins.jl package. For example, if L and R are two catalogs with coordinate keys :coordsL and :coordsR respectively, the two catalogs can be joined based on angular separation with FlexiJoins.innerjoin((L, R), FlexiJoins.by_distance(:coordsL, :coordsR, SkyCoords.separation, <=(0.1))) where the final condition indicates you only want to keep matches that have separations less than or equal to 0.1 rad. See their documentation on astronomy-specific applications here.","category":"page"},{"location":"#Accuracy","page":"Home","title":"Accuracy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All the supported conversions have been compared to the results of astropy.coordinates (to better than 0.0001 arcsec agreement for Float64). In turn, astropy.coordinates has been tested against many other tools.","category":"page"},{"location":"#Performance","page":"Home","title":"Performance","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For small and moderate numbers of coordinates, conversions are much faster than astropy.coordinates in Python. The following plot shows the performance for converting ICRS coordinates to various other systems (Galactic, FK5J2000 and FK5J1975), using astropy.coordinates (py_* labels) and SkyCoords.jl (jl_* labels). The x axis denotes the number of coordinates being simultaneously converted, with 1 corresponding to scalar coordinates.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: times)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Specs \nCPU Intel core i5-8259U @ 2.3GHz (4 cores)\nRAM 16GB\nJulia Version 1.2\nPython Version 3.7\nAstropy Version 3.1.2","category":"page"},{"location":"","page":"Home","title":"Home","text":"For scalar coordinates, SkyCoords.jl is up to 100,000 times faster. For very large vectors of one million coordinates or more, SkyCoords.jl is 2-4 times faster.  The source code for these benchmarks can be found in bench/.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you would like to contribute to SkyCoords please head over to the GitHub page and file an issue or open a pull request!","category":"page"}]
}
