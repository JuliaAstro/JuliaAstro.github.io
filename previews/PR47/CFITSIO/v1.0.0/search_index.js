var documenterSearchIndex = {"docs":
[{"location":"#","page":"Home","title":"Home","text":"CurrentModule = CFITSIO","category":"page"},{"location":"#CFITSIO.jl-1","page":"Home","title":"CFITSIO.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"(Image: GitHub) (Image: Build Status) (Image: PkgEval) (Image: Coverage)","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This module provides an interface familiar to users of the CFITSIO C library. It can be used with","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using CFITSIO","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The functions exported by this module operate on FITSFile objects, which is a thin wrapper around a pointer to a CFITSIO fitsfile.  For the most part, the functions are thin wrappers around the CFITSIO routines of the same names. Typically, they:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Convert from Julia types to C types as necessary.\nCheck the returned status value and raise an appropriate exception if non-zero.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"warning: Warning\nNote that these functions do not check if the file is still open before trying to access it. A segmentation fault can result from trying to operate on a closed file.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The following tables give the correspondances between CFITSIO \"types\", the BITPIX keyword and Julia types.","category":"page"},{"location":"#Type-Conversions-1","page":"Home","title":"Type Conversions","text":"","category":"section"},{"location":"#CFITSIO-Types-1","page":"Home","title":"CFITSIO Types","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CODE CFITSIO Julia\n int Cint\n long Clong\n LONGLONG Int64","category":"page"},{"location":"#FITS-BITPIX-1","page":"Home","title":"FITS BITPIX","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CODE CFITSIO Julia\n8 BYTE_IMG Uint8\n16 SHORT_IMG Int16\n32 LONG_IMG Int32\n64 LONGLONG_IMG Int64\n-32 FLOAT_IMG Float32\n-64 DOUBLE_IMG Float64","category":"page"},{"location":"#CFITSIO-Aliases-1","page":"Home","title":"CFITSIO Aliases","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CODE CFITSIO Julia Comments\n10 SBYTE_IMG Int8 written as: BITPIX = 8, BSCALE = 1, BZERO = -128\n20 USHORT_IMG Uint16 written as: BITPIX = 16, BSCALE = 1, BZERO = 32768\n40 LONG_IMG Uint32 written as: BITPIX = 32, BSCALE = 1, BZERO = 2147483648","category":"page"},{"location":"#FITS-Table-Data-Types-1","page":"Home","title":"FITS Table Data Types","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"CODE CFITSIO Julia\n1 TBIT \n11 TBYTE Cuchar, Uint8\n12 TSBYTE Cchar, Int8\n14 TLOGICAL Bool\n16 TSTRING String\n20 TUSHORT Cushort\n21 TSHORT Cshort\n30 TUINT Cuint\n31 TINT Cint\n40 TULONG Culong\n41 TLONG Clong\n42 TFLOAT Cfloat\n81 TLONGLONG Int64\n82 TDOUBLE Cdouble\n83 TCOMPLEX Complex{Cfloat}\n163 TDBLCOMPLEX Complex{Cdouble}","category":"page"},{"location":"#","page":"Home","title":"Home","text":"bitpix_from_type\ntype_from_bitpix\ncfitsio_typecode","category":"page"},{"location":"#CFITSIO.bitpix_from_type","page":"Home","title":"CFITSIO.bitpix_from_type","text":"bitpix_from_type(::Type) -> Cint\n\nReturn the FITS BITPIX code for the given Julia type\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.type_from_bitpix","page":"Home","title":"CFITSIO.type_from_bitpix","text":"type_from_bitpix(::Integer) -> Type\n\nReturn the Julia type from the FITS BITPIX code\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.cfitsio_typecode","page":"Home","title":"CFITSIO.cfitsio_typecode","text":"cfitsio_typecode(::Type) -> Cint\n\nReturn the CFITSIO type code for the given Julia type\n\n\n\n\n\n","category":"function"},{"location":"#File-access-1","page":"Home","title":"File access","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"fits_create_file\nfits_clobber_file\nfits_open_file\nfits_open_table\nfits_open_image\nfits_open_data\nfits_close_file\nfits_delete_file\nfits_file_name","category":"page"},{"location":"#CFITSIO.fits_create_file","page":"Home","title":"CFITSIO.fits_create_file","text":"fits_create_file(filename::AbstractString)\n\nCreate and open a new empty output FITSFile.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_clobber_file","page":"Home","title":"CFITSIO.fits_clobber_file","text":"fits_clobber_file(filename::AbstractString)\n\nLike fits_create_file, but overwrites filename if it exists.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_open_file","page":"Home","title":"CFITSIO.fits_open_file","text":"fits_open_file(filename::String)\n\nOpen an existing data file.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_open_table","page":"Home","title":"CFITSIO.fits_open_table","text":"fits_open_table(filename::String)\n\nOpen an existing data file (like fits_open_file) and move to the first HDU containing either an ASCII or a binary table.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_open_image","page":"Home","title":"CFITSIO.fits_open_image","text":"fits_open_image(filename::String)\n\nOpen an existing data file (like fits_open_file) and move to the first HDU containing an image.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_open_data","page":"Home","title":"CFITSIO.fits_open_data","text":"fits_open_data(filename::String)\n\nOpen an existing data file (like fits_open_file) and move to the first HDU containing either an image or a table.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_close_file","page":"Home","title":"CFITSIO.fits_close_file","text":"fits_close_file(f::FITSFile)\n\nClose a previously opened FITS file.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_delete_file","page":"Home","title":"CFITSIO.fits_delete_file","text":"fits_delete_file(f::FITSFile)\n\nClose an opened FITS file (like fits_close_file) and removes it from the disk.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_file_name","page":"Home","title":"CFITSIO.fits_file_name","text":"fits_file_name(f::FITSFile)\n\nReturn the name of the file associated with object f.\n\n\n\n\n\n","category":"function"},{"location":"#HDU-Routines-1","page":"Home","title":"HDU Routines","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The functions described in this section change the current HDU and to find their number and type. The following is a short example which shows how to use them:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"num = fits_get_num_hdus(f)\nprintln(\"Number of HDUs in the file: \", num)\n\nfor i = 1:num\n    hdu_type = fits_movabs_hdu(f, i)\n    println(i, \") hdu_type = \", hdu_type)\nend","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fits_get_num_hdus\nfits_movabs_hdu\nfits_movrel_hdu\nfits_movnam_hdu","category":"page"},{"location":"#CFITSIO.fits_get_num_hdus","page":"Home","title":"CFITSIO.fits_get_num_hdus","text":"fits_get_num_hdus(f::FITSFile)\n\nReturn the number of HDUs in the file.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_movabs_hdu","page":"Home","title":"CFITSIO.fits_movabs_hdu","text":"fits_movabs_hdu(f::FITSFile, hduNum::Integer)\n\nChange the current HDU to the value specified by hduNum, and return a symbol describing the type of the HDU.\n\nPossible symbols are: image_hdu, ascii_table, or binary_table. The value of hduNum must range between 1 and the value returned by fits_get_num_hdus.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_movrel_hdu","page":"Home","title":"CFITSIO.fits_movrel_hdu","text":"fits_movrel_hdu(f::FITSFile, hduNum::Integer)\n\nChange the current HDU by moving forward or backward by hduNum HDUs (positive means forward), and return the same as fits_movabs_hdu.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_movnam_hdu","page":"Home","title":"CFITSIO.fits_movnam_hdu","text":"fits_movnam_hdu(f::FITSFile, extname::String, extver::Integer=0,\n      hdu_type_int::Integer=-1)\n\nChange the current HDU by moving to the (first) HDU which has the specified extension type and EXTNAME and EXTVER keyword values (or HDUNAME and HDUVER keywords).\n\nIf extver is 0 (the default) then the EXTVER keyword is ignored and the first HDU with a matching EXTNAME (or HDUNAME) keyword will be found. If hdu_type_int is -1 (the default) only the extname and extver values will be used to locate the correct extension. If no matching HDU is found in the file, the current HDU will remain unchanged.\n\n\n\n\n\n","category":"function"},{"location":"#Header-Keyword-Routines-1","page":"Home","title":"Header Keyword Routines","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"fits_get_hdrspace\nfits_read_keyword\nfits_read_record\nfits_read_keyn\nfits_write_key\nfits_write_record\nfits_delete_record\nfits_delete_key\nfits_hdr2str","category":"page"},{"location":"#CFITSIO.fits_get_hdrspace","page":"Home","title":"CFITSIO.fits_get_hdrspace","text":"fits_get_hdrspace(f::FITSFile) -> (keysexist, morekeys)\n\nReturn the number of existing keywords (not counting the END keyword) and the amount of space currently available for more keywords.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_read_keyword","page":"Home","title":"CFITSIO.fits_read_keyword","text":"fits_read_keyword(f::FITSFile, keyname::String) -> (value, comment)\n\nyields the specified keyword value and commend (as a tuple of strings), throws and error if the keyword is not found.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_read_record","page":"Home","title":"CFITSIO.fits_read_record","text":"fits_read_record(f::FITSFile, keynum::Int) -> String\n\nReturn the nth header record in the CHU. The first keyword in the header is at keynum = 1.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_read_keyn","page":"Home","title":"CFITSIO.fits_read_keyn","text":"fits_read_keyn(f::FITSFile, keynum::Int) -> (name, value, comment)\n\nReturn the nth header record in the CHU. The first keyword in the header is at keynum = 1.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_write_key","page":"Home","title":"CFITSIO.fits_write_key","text":"fits_write_key(f::FITSFile, keyname::String, value, comment::String)\n\nWrite a keyword of the appropriate data type into the CHU.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_write_record","page":"Home","title":"CFITSIO.fits_write_record","text":"fits_write_record(f::FITSFile, card::String)\n\nWrite a user specified keyword record into the CHU.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_delete_record","page":"Home","title":"CFITSIO.fits_delete_record","text":"fits_delete_record(f::FITSFile, keynum::Int)\n\nDelete the keyword record at the specified index.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_delete_key","page":"Home","title":"CFITSIO.fits_delete_key","text":"fits_delete_key(f::FITSFile, keyname::String)\n\nDelete the keyword named keyname.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_hdr2str","page":"Home","title":"CFITSIO.fits_hdr2str","text":"fits_hdr2str(f::FITSFile, nocomments::Bool=false)\n\nReturn the header of the CHDU as a string. If nocomments is true, comment cards are stripped from the output.\n\n\n\n\n\n","category":"function"},{"location":"#Image-HDU-Routines-1","page":"Home","title":"Image HDU Routines","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"fits_get_img_size\nfits_create_img\nfits_write_pix\nfits_read_pix","category":"page"},{"location":"#CFITSIO.fits_get_img_size","page":"Home","title":"CFITSIO.fits_get_img_size","text":"fits_get_img_size(f::FITSFile)\n\nGet the dimensions of the image.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_create_img","page":"Home","title":"CFITSIO.fits_create_img","text":"fits_create_img(f::FITSFile, t::Type, naxes::Vector{Int})\n\nCreate a new primary array or IMAGE extension with a specified data type and size.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_write_pix","page":"Home","title":"CFITSIO.fits_write_pix","text":"fits_write_pix(f::FITSFile, fpixel::Vector{Int}, nelements::Int, data::StridedArray)\n\nWrite pixels from data into the FITS file. The data needs to be stored contiguously in memory.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_read_pix","page":"Home","title":"CFITSIO.fits_read_pix","text":"fits_read_pix(f::FITSFile, fpixel::Vector{Int}, nelements::Int, data::Array)\n\nRead pixels from the FITS file into data.\n\n\n\n\n\n","category":"function"},{"location":"#Table-Routines-1","page":"Home","title":"Table Routines","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"There are two functions to create a new HDU table extension: fits_create_ascii_table and fits_create_binary_table. In general, one should pick the second as binary tables require less space on the disk and are more efficient to read and write. (Moreover, a few datatypes are not supported in ASCII tables). In order to create a table, the programmer must specify the characteristics of each column by passing an array of tuples. Here is an example:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"f = fits_create_file(\"!new.fits\")\ncoldefs = [(\"SPEED\", \"1D\", \"m/s\"),\n           (\"MASS\", \"1E\", \"kg\"),\n           (\"PARTICLE\", \"20A\", \"Name\")]\nfits_create_binary_tbl(f, 10, coldefs, \"PARTICLE\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This example creates a table with room for 10 entries, each of them describing the characteristics of a particle: its speed, its mass, and its name (codified as a 20-character string). See the documentation of fits_create_ascii_tbl for more details.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"fits_create_ascii_tbl\nfits_create_binary_tbl\nfits_get_coltype\nfits_insert_rows\nfits_delete_rows\nfits_read_col\nfits_write_col","category":"page"},{"location":"#CFITSIO.fits_create_ascii_tbl","page":"Home","title":"CFITSIO.fits_create_ascii_tbl","text":"fits_create_ascii_tbl(f::FITSFile, numrows::Integer, coldefs::Array{ColumnDef},\n            extname::String)\n\nAppend a new HDU containing an ASCII table.\n\nThe table will have numrows rows (this parameter can be set to zero), each initialized with the default value. In order to create a table, the programmer must specify the characteristics of each column. The columns are specified by the coldefs variable, which is an array of tuples. Each tuple must have three string fields:\n\nThe name of the column.\nThe data type and the repetition count. It must be a string made by a number\n\n(the repetition count) followed by a letter specifying the type (in the example above, D stands for Float64, E stands for Float32, A stands for Char). Refer to the CFITSIO documentation for more information about the syntax of this parameter.\n\nThe measure unit of this field. This is used only as a comment.\n\nThe value of extname sets the \"extended name\" of the table, i.e., a string that in some situations can be used to refer to the HDU itself.\n\nNote that, unlike for binary tables, CFITSIO puts some limitations to the types that can be used in an ASCII table column. Refer to the CFITSIO manual for further information.\n\nSee also fits_create_binary_tbl for a similar function which creates binary tables.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_create_binary_tbl","page":"Home","title":"CFITSIO.fits_create_binary_tbl","text":"fits_create_binary_tbl(f::FITSFile, numrows::Integer, coldefs::Array{ColumnDef},\n             extname::String)\n\nAppend a new HDU containing a binary table. The meaning of the parameters is the same as in a call to fits_create_ascii_tbl.\n\nIn general, one should pick this function for creating tables in a new HDU, as binary tables require less space on the disk and are more efficient to read and write. (Moreover, a few datatypes are not supported in ASCII tables).\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_get_coltype","page":"Home","title":"CFITSIO.fits_get_coltype","text":"fits_get_coltype(f::FITSFile, colnum::Integer)\n\nProvided that the current HDU contains either an ASCII or binary table, return information about the column at position colnum (counting from 1).\n\nReturn is a tuple containing\n\ntypecode: CFITSIO integer type code of the column.\nrepcount: Repetition count for the column.\nwidth: Width of an individual element.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_insert_rows","page":"Home","title":"CFITSIO.fits_insert_rows","text":"fits_insert_rows(f::FITSFile, firstrow::Integer, nrows::Integer)\n\nInsert a number of rows equal to nrows after the row number firstrow.\n\nThe elements in each row are initialized to their default value: you can modify them later using fits_write_col.\n\nSince the first row is at position 1, in order to insert rows before the first one firstrow must be equal to zero.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_delete_rows","page":"Home","title":"CFITSIO.fits_delete_rows","text":"fits_delete_rows(f::FITSFile, firstrow::integer, nrows::Integer)\n\nDelete nrows rows, starting from the one at position firstrow. The index of the first row is 1.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_read_col","page":"Home","title":"CFITSIO.fits_read_col","text":"fits_read_col(f, colnum, firstrow, firstelem, data)\n\nRead data from one column of an ASCII/binary table and convert the data into the specified type T.\n\nArguments\n\nf::FITSFile: the file to be read.\ncolnum::Integer: the column number, where the value of the first column is 1.\nfirstrow::Integer: the elements to be read start from this row.\nfirstelem::Integer: specifies which is the first element to be read, when each\n\ncell contains more than one element (i.e., the \"repetition count\" of the field is greater than one).\n\ndata::Array: at the end of the call, this will be filled with the elements read\n\nfrom the column. The length of the array gives the overall number of elements.\n\n\n\n\n\n","category":"function"},{"location":"#CFITSIO.fits_write_col","page":"Home","title":"CFITSIO.fits_write_col","text":"fits_write_col(f, colnum, firstrow, firstelem, data)\n\nWrite some data in one column of a ASCII/binary table.\n\nIf there is no room for the elements, new rows will be created. (It is therefore useless to call fits_insert_rows if you only need to append elements to the end of a table.)\n\nf::FITSFile: the file in which data will be written.\ncolnum::Integer: the column number, where the value of the first column is 1.\nfirstrow::Integer: the data wil be written from this row onwards.\nfirstelem::Integer: specifies the position in the row where the first element\n\nwill be written.\n\ndata::Array: contains the elements that are to be written to the column of the table.\n\n\n\n\n\n","category":"function"},{"location":"#Miscellaneous-1","page":"Home","title":"Miscellaneous","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"libcfitsio_version","category":"page"},{"location":"#CFITSIO.libcfitsio_version","page":"Home","title":"CFITSIO.libcfitsio_version","text":"libcfitsio_version() -> VersionNumber\n\nReturn the version of the underlying CFITSIO library\n\nExample\n\njulia> libcfitsio_version()\nv\"3.37.0\"\n\n\n\n\n\n","category":"function"}]
}
